#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[RUST-SIGNAL-BINARY\]
/// You can add your custom comments like this.
/// Protobuf's import statement also works well.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SampleFractal {
    #[prost(double, tag="1")]
    pub current_scale: f64,
    #[prost(message, optional, tag="2")]
    pub dummy: ::core::option::Option<super::counter_number::SampleSchema>,
}
// @@protoc_insertion_point(module)

impl SampleFractal {
    pub fn send_signal_to_dart(&self, binary: Vec<u8>) {
        let result = send_rust_signal(
            8,
            self.encode_to_vec(),
            binary,
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
