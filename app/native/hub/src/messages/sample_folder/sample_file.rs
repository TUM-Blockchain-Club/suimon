#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SampleInput {
    #[prost(enumeration="Kind", tag="1")]
    pub kind: i32,
    #[prost(oneof="sample_input::OneofInput", tags="2, 3")]
    pub oneof_input: ::core::option::Option<sample_input::OneofInput>,
}
/// Nested message and enum types in `SampleInput`.
pub mod sample_input {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum OneofInput {
        #[prost(string, tag="2")]
        Name(::prost::alloc::string::String),
        #[prost(int32, tag="3")]
        Age(i32),
    }
}
/// \[RUST-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SampleOutput {
    #[prost(enumeration="Kind", tag="1")]
    pub kind: i32,
    #[prost(oneof="sample_output::OneofInput", tags="2, 3")]
    pub oneof_input: ::core::option::Option<sample_output::OneofInput>,
}
/// Nested message and enum types in `SampleOutput`.
pub mod sample_output {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum OneofInput {
        #[prost(string, tag="2")]
        Name(::prost::alloc::string::String),
        #[prost(int32, tag="3")]
        Age(i32),
    }
}
/// \[RUST-ATTRIBUTE(#[derive(Hash)\])]
#[derive(Hash)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WithRustAttribute {
    #[prost(bool, tag="1")]
    pub dummy: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kind {
    One = 0,
    Two = 1,
}
impl Kind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::One => "one",
            Self::Two => "two",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "one" => Some(Self::One),
            "two" => Some(Self::Two),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)

type SampleInputChannel = LazyLock<(
    SignalSender<DartSignal<SampleInput>>,
    SignalReceiver<DartSignal<SampleInput>>,
)>;
pub static SAMPLE_INPUT_CHANNEL: SampleInputChannel =
    LazyLock::new(signal_channel);

impl SampleInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        SAMPLE_INPUT_CHANNEL.1.clone()
    }
}

impl SampleOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            2,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
