#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SampleNumberInput {
    #[prost(string, tag="1")]
    pub letter: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub dummy_one: u32,
    #[prost(message, optional, tag="3")]
    pub dummy_two: ::core::option::Option<SampleSchema>,
    #[prost(int32, repeated, tag="4")]
    pub dummy_three: ::prost::alloc::vec::Vec<i32>,
}
/// \[RUST-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SampleNumberOutput {
    #[prost(int32, tag="1")]
    pub current_number: i32,
    #[prost(uint32, tag="2")]
    pub dummy_one: u32,
    #[prost(message, optional, tag="3")]
    pub dummy_two: ::core::option::Option<SampleSchema>,
    #[prost(int32, repeated, tag="4")]
    pub dummy_three: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SampleSchema {
    #[prost(bool, tag="1")]
    pub sample_field_one: bool,
    #[prost(bool, tag="2")]
    pub sample_field_two: bool,
}
// @@protoc_insertion_point(module)

type SampleNumberInputChannel = LazyLock<(
    SignalSender<DartSignal<SampleNumberInput>>,
    SignalReceiver<DartSignal<SampleNumberInput>>,
)>;
pub static SAMPLE_NUMBER_INPUT_CHANNEL: SampleNumberInputChannel =
    LazyLock::new(signal_channel);

impl SampleNumberInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        SAMPLE_NUMBER_INPUT_CHANNEL.1.clone()
    }
}

impl SampleNumberOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            6,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
