#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProofGenerationInput {
    #[prost(uint64, tag="1")]
    pub a: u64,
    #[prost(uint64, tag="2")]
    pub b: u64,
}
/// \[RUST-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProofGenerationOutput {
    #[prost(bytes="vec", tag="1")]
    pub vk_bytes: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub proof_bytes: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub public_inputs_bytes: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)

type ProofGenerationInputChannel = LazyLock<(
    SignalSender<DartSignal<ProofGenerationInput>>,
    SignalReceiver<DartSignal<ProofGenerationInput>>,
)>;
pub static PROOF_GENERATION_INPUT_CHANNEL: ProofGenerationInputChannel =
    LazyLock::new(signal_channel);

impl ProofGenerationInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        PROOF_GENERATION_INPUT_CHANNEL.1.clone()
    }
}

impl ProofGenerationOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            4,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
